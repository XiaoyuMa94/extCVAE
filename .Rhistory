lines(c(upper_lon, upper_lon), c(upper_lat, lower_lat), col='black', lwd=2)
lines(c(upper_lon, lower_lon), c(upper_lat, upper_lat), col='black', lwd=2)
lines(c(upper_lon, lower_lon), c(lower_lat, lower_lat), col='black', lwd=2)
lines(c(lower_lon, lower_lon), c(upper_lat, lower_lat), col='black', lwd=2)
iter_knots = 123
points(Knot_loc$x[iter_knots], Knot_loc$y[iter_knots], pch='+', lwd=2)
upper_lon = Knot_loc$x[iter_knots] + 2*lon_sep
lower_lon = Knot_loc$x[iter_knots] - 2*lon_sep
upper_lat = Knot_loc$y[iter_knots] + 2*lat_sep
lower_lat = Knot_loc$y[iter_knots] - 2*lat_sep
lines(c(upper_lon, upper_lon), c(upper_lat, lower_lat), col='black', lwd=2)
lines(c(upper_lon, lower_lon), c(upper_lat, upper_lat), col='black', lwd=2)
lines(c(upper_lon, lower_lon), c(lower_lat, lower_lat), col='black', lwd=2)
lines(c(lower_lon, lower_lon), c(upper_lat, lower_lat), col='black', lwd=2)
plot(Summer_max[,69:70], xlim=c(-105,-90),ylim=c(29,49), cex=0.5, pch=20, xlab='Longitute',
ylab='Latitude', col='gray')
fields::US(add=TRUE, col='brown',lwd=1)
points(Knot_loc$x, Knot_loc$y, col='blue', pch='+',lwd=2)
iter_knots = 1
points(Knot_loc$x[iter_knots], Knot_loc$y[iter_knots], pch='+', lwd=4)
upper_lon = Knot_loc$x[iter_knots] + 2*lon_sep
lower_lon = Knot_loc$x[iter_knots] - 2*lon_sep
upper_lat = Knot_loc$y[iter_knots] + 2*lat_sep
lower_lat = Knot_loc$y[iter_knots] - 2*lat_sep
lines(c(upper_lon, upper_lon), c(upper_lat, lower_lat), col='black', lwd=2)
lines(c(upper_lon, lower_lon), c(upper_lat, upper_lat), col='black', lwd=2)
lines(c(upper_lon, lower_lon), c(lower_lat, lower_lat), col='black', lwd=2)
lines(c(lower_lon, lower_lon), c(upper_lat, lower_lat), col='black', lwd=2)
iter_knots = 123
points(Knot_loc$x[iter_knots], Knot_loc$y[iter_knots], pch='+', lwd=4)
upper_lon = Knot_loc$x[iter_knots] + 2*lon_sep
lower_lon = Knot_loc$x[iter_knots] - 2*lon_sep
upper_lat = Knot_loc$y[iter_knots] + 2*lat_sep
lower_lat = Knot_loc$y[iter_knots] - 2*lat_sep
lines(c(upper_lon, upper_lon), c(upper_lat, lower_lat), col='black', lwd=2)
lines(c(upper_lon, lower_lon), c(upper_lat, upper_lat), col='black', lwd=2)
lines(c(upper_lon, lower_lon), c(lower_lat, lower_lat), col='black', lwd=2)
lines(c(lower_lon, lower_lon), c(upper_lat, lower_lat), col='black', lwd=2)
plot(Summer_max[,69:70], xlim=c(-105,-90),ylim=c(29,49), cex=0.5, pch=20, xlab='Longitute',
ylab='Latitude', col='gray')
fields::US(add=TRUE, col='brown',lwd=1)
points(Knot_loc$x, Knot_loc$y, col='blue', pch='+',lwd=2)
iter_knots = 1
points(Knot_loc$x[iter_knots], Knot_loc$y[iter_knots], pch='+', lwd=6)
upper_lon = Knot_loc$x[iter_knots] + 2*lon_sep
lower_lon = Knot_loc$x[iter_knots] - 2*lon_sep
upper_lat = Knot_loc$y[iter_knots] + 2*lat_sep
lower_lat = Knot_loc$y[iter_knots] - 2*lat_sep
lines(c(upper_lon, upper_lon), c(upper_lat, lower_lat), col='black', lwd=2)
lines(c(upper_lon, lower_lon), c(upper_lat, upper_lat), col='black', lwd=2)
lines(c(upper_lon, lower_lon), c(lower_lat, lower_lat), col='black', lwd=2)
lines(c(lower_lon, lower_lon), c(upper_lat, lower_lat), col='black', lwd=2)
iter_knots = 123
points(Knot_loc$x[iter_knots], Knot_loc$y[iter_knots], pch='+', lwd=6)
upper_lon = Knot_loc$x[iter_knots] + 2*lon_sep
lower_lon = Knot_loc$x[iter_knots] - 2*lon_sep
upper_lat = Knot_loc$y[iter_knots] + 2*lat_sep
lower_lat = Knot_loc$y[iter_knots] - 2*lat_sep
lines(c(upper_lon, upper_lon), c(upper_lat, lower_lat), col='black', lwd=2)
lines(c(upper_lon, lower_lon), c(upper_lat, upper_lat), col='black', lwd=2)
lines(c(upper_lon, lower_lon), c(lower_lat, lower_lat), col='black', lwd=2)
lines(c(lower_lon, lower_lon), c(upper_lat, lower_lat), col='black', lwd=2)
fields::image.plot(lon_range, lat_range, matrix(EmpIntv9[,3],ncol = length(lon_range), nrow=length(lat_range)),
col=pal, breaks=seq(0,0.5,length.out=10), main=expression(paste(u==0.9, ', h=30km')),xlim=c(-105,-90),ylim=c(29,49))
fields::US(add=TRUE)
fields::image.plot(lon_range, lat_range, matrix(EmpIntv9[,3],ncol = length(lon_range), nrow=length(lat_range)),
col=pal, breaks=seq(0,0.5,length.out=10), main=expression(paste(u==0.9, ', h=30km')),xlim=c(-105,-90),ylim=c(29,49))
fields::US(add=TRUE, col=scales::alpha('brown', 0.88))
fields::image.plot(lon_range, lat_range, matrix(EmpIntv9[,3],ncol = length(lon_range), nrow=length(lat_range)),
col=pal, breaks=seq(0,0.5,length.out=10), main=expression(paste(u==0.9, ', h=30km')),xlim=c(-105,-90),ylim=c(29,49))
fields::US(add=TRUE, col=scales::alpha('black', 0.88))
fields::image.plot(lon_range, lat_range, matrix(EmpIntv9[,3],ncol = length(lon_range), nrow=length(lat_range)),
col=pal, breaks=seq(0,0.5,length.out=10), main=expression(paste(u==0.9, ', h=30km')),xlim=c(-105,-90),ylim=c(29,49))
fields::US(add=TRUE, col=scales::alpha('black', 0.6))
fields::image.plot(lon_range, lat_range, matrix(EmpIntv9[,3],ncol = length(lon_range), nrow=length(lat_range)),
col=pal, breaks=seq(0,0.5,length.out=10), main=expression(paste(u==0.9, ', h=30km')),xlim=c(-105,-90),ylim=c(29,49))
fields::US(add=TRUE, col=scales::alpha('black', 0.3))
fields::image.plot(lon_range, lat_range, matrix(EmpIntv9[,3],ncol = length(lon_range), nrow=length(lat_range)),
col=pal, breaks=seq(0,0.5,length.out=10), main=expression(paste(u==0.9, ', h=30km')),xlim=c(-105,-90),ylim=c(29,49))
fields::US(add=TRUE, col=scales::alpha('black', 0.5))
fields::US(add=TRUE, col=scales::alpha('black', 0.5),lwd=1.2)
?fields::image.plot
fields::image.plot(lon_range, lat_range, matrix(EmpIntv9[,3],ncol = length(lon_range), nrow=length(lat_range)),
col=pal, breaks=seq(0,0.5,length.out=10), main=expression(paste(u==0.9, ', h=30km')),
xlim=c(-105,-90),ylim=c(29,49),legend.lab=expression(chi_h(u)))
fields::US(add=TRUE, col=scales::alpha('black', 0.5),lwd=1.2)
fields::image.plot(lon_range, lat_range, matrix(EmpIntv9[,3],ncol = length(lon_range), nrow=length(lat_range)),
col=pal, breaks=seq(0,0.5,length.out=10), main=expression(paste(u==0.9, ', h=30km')),
xlim=c(-105,-90),ylim=c(29,49),legend.lab=expression(chi[h](u)))
fields::US(add=TRUE, col=scales::alpha('black', 0.5),lwd=1.2)
fields::image.plot(lon_range, lat_range, matrix(EmpIntv9[,3],ncol = length(lon_range), nrow=length(lat_range)),
col=pal, breaks=seq(0,0.5,length.out=10), main=expression(paste(u==0.9, ', h=30km')),
xlim=c(-105,-90),ylim=c(29,49),xlab='Longitude',ylab='Latitude')
png(filename='~/Desktop/chi_nonstat1.png', width=400, height=380)
fields::image.plot(lon_range, lat_range, matrix(EmpIntv9[,3],ncol = length(lon_range), nrow=length(lat_range)),
col=pal, breaks=seq(0,0.5,length.out=10),
xlim=c(-105,-90),ylim=c(29,49),xlab='Longitude',ylab='Latitude')
fields::US(add=TRUE, col=scales::alpha('black', 0.5),lwd=1.2)
dev.off()
png(filename='~/Desktop/chi_nonstat2.png', width=400, height=380)
fields::image.plot(lon_range, lat_range, matrix(EmpIntv95[,3],ncol = length(lon_range), nrow=length(lat_range)),
col=pal, breaks=seq(0,0.5,length.out=10),
xlim=c(-105,-90),ylim=c(29,49), xlab='Longitude',ylab='Latitude')
fields::US(add=TRUE, col=scales::alpha('black', 0.5),lwd=1.2)
dev.off()
png(filename='~/Desktop/chi_nonstat3.png', width=400, height=380)
fields::image.plot(lon_range, lat_range, matrix(EmpIntv99[,3],ncol = length(lon_range), nrow=length(lat_range)),
col=pal, breaks=seq(0,0.5,length.out=10),
xlim=c(-105,-90),ylim=c(29,49),xlab='Longitude',ylab='Latitude')
fields::US(add=TRUE, col=scales::alpha('black', 0.5),lwd=1.2)
dev.off()
5.05/3.4
28+9
37+9+9+9+10
4*7+4*9+10
4*7+4*9+10-100
10+7*3+9*4+10+21
10+8+14+9+10+9+9+10+21
534.42-56.4
534.42+146.23-56.4-21
1- choose(90,10)/choose(100,10)
0.9*0.01+0.096*0.99
0.9*0.01/0.10404
1-0.096
0.904*0.99+0.1*0.01
0.904*0.99/0.89596
52/4
13*choose(4,2)
choose(52,2)
78/1326
1/13
(2/3)*(1/2)+(3/5)*(1/2)
(2/3)*(1/2)/((2/3)*(1/2)+(3/5)*(1/2))
19/30
10/19
0.5*0.05/0.4
(6*choose(7,3))^2*6*choose(4,3)
7^7
choose(7,3)
(6*choose(7,3))^2*6*choose(4,3)/36
?factorial
factorial(5)
factorial(5)*choose(7,5)*choose(7,3)*choose(4,1)*choose(3,1)*choose(2,1) + factorial(4)*choose(7,3)*choose(4,2)*choose(2,1)+factorial(3)*choose(7,3)*choose(7,3)*choose(4,2)
7^7
factorial(5)*choose(7,5)*choose(7,3)*choose(4,1)*choose(3,1)*choose(2,1)
?choose
factorial(5)*choose(7,5)*choose(7,3)
factorial(4)*choose(7,4)*choose(7,3)*choose(4,2)
factorial(3)*choose(7,3)*choose(7,3)*choose(4,2)/2
factorial(2)*choose(7,2)*choose(7,3)
88200+176400+22050+1470
7^7-14700-288120
gamma(-0.5)
k=1;1-1/2^k
k=2;1-1/2^k
k=3;1-1/2^k
k=4;1-1/2^k
19/30
10/19
3/51
10+10+9+6+4+8+4+8+8+10+9+6+8+5
f <- function(r) (r/2)^2
curve(f, from =0, to=2, xlim=c(-2,4))
curve(f, from =0, to=2, xlim=c(-2,4), ylab=expression(F_R(r)))
curve(f, from =0, to=2, xlim=c(-2,4), ylab=expression(F[R](r)))
curve(f, from =0, to=2, xlim=c(-4,6), ylab=expression(F[R](r)))
curve(f, from =0, to=2, xlim=c(-1,3), ylab=expression(F[R](r)))
curve(f, from =0, to=2, xlim=c(-1,3), ylab=expression(F[R](r)), lwd=2)
curve(f, from =0, to=2, xlim=c(-1,3), ylab=expression(F[R](r)), lwd=2, col='blue')
lines(x=c(-2,0), y=c(0,0), lwd=2, col='blue')
lines(x=c(2,4), y=c(1,1), lwd=2, col='blue')
curve(f, from =0, to=2, xlim=c(-1,3), ylab=expression(F[R](r)), lwd=2, col='blue',xlab='r')
lines(x=c(-2,0), y=c(0,0), lwd=2, col='blue')
lines(x=c(2,4), y=c(1,1), lwd=2, col='blue')
f <- function(r) (r/2)
curve(f, from =0, to=2, xlim=c(-1,3), ylab=expression(f[R](r)), lwd=2, col='orange',xlab='r')
lines(x=c(2,4), y=c(0,0), lwd=2, col='orange')
lines(x=c(-2,0), y=c(0,0), lwd=2, col='orange')
abline(v=2,lty=2,col='orange')
curve(f, from =0, to=2, xlim=c(-1,3), ylab=expression(f[R](r)), lwd=2, col='orange',xlab='r')
lines(x=c(-2,0), y=c(0,0), lwd=2, col='orange')
abline(v=2,lty=2,col='orange')
curve(f, from =0, to=2, xlim=c(-1,3), ylab=expression(f[R](r)), lwd=2, col='orange',xlab='r')
abline(v=2,lty=2,col='orange')
curve(f, from =0, to=2, xlim=c(-1,3), ylab=expression(f[R](r)), lwd=2, col='orange',xlab='r')
lines(x=c(-2,0), y=c(0,0), lwd=2, col='orange')
lines(x=c(2,4), y=c(0,0), lwd=2, col='orange')
lines(x=c(2,2), y=c(0,1), lwd=2, lty=2, col='orange')
curve(f, from =0, to=2, xlim=c(-1,3), ylab=expression(f[R](r)), lwd=2, col='orange',xlab='r')
lines(x=c(2,4), y=c(0,0), lwd=2, col='orange')
lines(x=c(-2,0), y=c(0,0), lwd=2, col='orange')
lines(x=c(2,2), y=c(0,1), lwd=2, lty=3, col='orange')
0.33*0.5+0.4*0.3+0.22*0.2
{0.4*0.3}/{0.329}
f <- function(r) exp(-2*x^{-1})
curve(f, from =0, to=5, xlim=c(-1,3), ylab=expression(F[R](r)), lwd=2, col='blue',xlab='r')
f <- function(r) exp(-2*r^{-1})
curve(f, from =0, to=5, xlim=c(-1,3), ylab=expression(F[R](r)), lwd=2, col='blue',xlab='r')
curve(f, from =0, to=6, xlim=c(-1,6), ylab=expression(F[R](r)), lwd=2, col='blue',xlab='r')
f <- function(r) exp(-5*r^{-1})
curve(f, from =0, to=10, xlim=c(-1,10), ylab=expression(F[R](r)), lwd=2, col='blue',xlab='r', xaxt='n')
f <- function(r) exp(-0.5*r^{-1})
curve(f, from =0, to=10, xlim=c(-1,10), ylab=expression(F[R](r)), lwd=2, col='blue',xlab='r', xaxt='n')
curve(f, from =0, to=10, xlim=c(-1,10), ylim=c(0,1),ylab=expression(F[R](r)), lwd=2, col='blue',xlab='r', xaxt='n')
f <- function(r) exp(-r^{-1})
curve(f, from =0, to=10, xlim=c(-1,10), ylim=c(0,1),ylab=expression(F[R](r)), lwd=2, col='blue',xlab='r', xaxt='n')
f <- function(r) exp(-0.8*r^{-1})
curve(f, from =0, to=10, xlim=c(-1,10), ylim=c(0,1),ylab=expression(F[R](r)), lwd=2, col='blue',xlab='r', xaxt='n')
f <- function(r) exp(-0.6*r^{-1})
curve(f, from =0, to=10, xlim=c(-1,10), ylim=c(0,1),ylab=expression(F[R](r)), lwd=2, col='blue',xlab='r', xaxt='n')
f <- function(r) exp(-0.5*r^{-1})
curve(f, from =0, to=10, xlim=c(-1,10), ylim=c(0,1),ylab=expression(F[R](r)), lwd=2, col='blue',xlab='r', xaxt='n')
lines(x=c(-2,0), y=c(0,0), lwd=2, col='blue')
axis(1,at=c(0, 10), labels=c(0, expression(infty)))
axis(1,at=c(0, 10), labels=c(0, expression(infinity)))
curve(f, from =0, to=10, xlim=c(-1,10), ylim=c(0,1),ylab=expression(F[R](r)), lwd=2, col='blue',xlab='r', xaxt='n')
axis(1,at=c(0, 10), labels=c(0, expression(infinity)))
abline(h=1, lty=3)
lines(x=c(-2,0), y=c(0,0), lwd=2, col='blue')
alpha=2;exp(-2*4^{-\alpha})-exp(-2*2^{-\alpha})
alpha=2;exp(-2*4^{-alpha})-exp(-2*2^{-alpha})
f <- function(r) (2*r/3)
curve(f, from =0, to=1.5, xlim=c(-1,3), ylab=expression(F[R](r)), lwd=2, col='blue')
lines(x=c(-2,0), y=c(0,0), lwd=2, col='blue')
lines(x=c(1.5,10), y=c(1,1), lwd=2, col='blue')
f <- function(r) 1/1.5
curve(f, from =0, to=1.5, xlim=c(-1,3), ylab=expression(F[R](r)), lwd=2, col='blue')
f <- function(r) 1/1.5*rep(1, length(r))
)
curve(f, from =0, to=1.5, xlim=c(-1,3), ylab=expression(F[R](r)), lwd=2, col='blue')
curve(f, from =0, to=1.5, xlim=c(-1,3), ylab=expression(F[R](r)), lwd=2, col='blue',ylim=c(0,1))
curve(f, from =0, to=1.5, xlim=c(-1,3), ylab=expression(F[R](r)), lwd=2, col='orange',ylim=c(0,1))
lines(x=c(-2,0), y=c(0,0), lwd=2, col='orange')
lines(x=c(1.5,0), y=c(0,0), lwd=2, col='orange')
curve(f, from =0, to=1.5, xlim=c(-1,3), ylab=expression(F[R](r)), lwd=2, col='orange',ylim=c(0,1))
lines(x=c(-2,0), y=c(0,0), lwd=2, col='orange')
lines(x=c(1.5,10), y=c(0,0), lwd=2, col='orange')
2/3
curve(f, from =0, to=1.5, xlim=c(-1,3), ylab=expression(F[R](r)), lwd=2, col='orange',ylim=c(0,1),xlab='r')
lines(x=c(1.5,10), y=c(0,0), lwd=2, col='orange')
lines(x=c(-2,0), y=c(0,0), lwd=2, col='orange')
f <- function(r) (2*r/3)
curve(f, from =0, to=1.5, xlim=c(-1,3), ylab=expression(F[R](r)), lwd=2, col='blue',xlab='r')
lines(x=c(-2,0), y=c(0,0), lwd=2, col='blue')
lines(x=c(1.5,10), y=c(1,1), lwd=2, col='blue')
f <- function(r) 1/1.5*rep(1, length(r))
curve(f, from =0, to=1.5, xlim=c(-1,3), ylab=expression(f[R](r)), lwd=2, col='orange',ylim=c(0,1))
lines(x=c(1.5,0), y=c(0,0), lwd=2, col='orange')
lines(x=c(-2,0), y=c(0,0), lwd=2, col='orange')
curve(f, from =0, to=1.5, xlim=c(-1,3), ylab=expression(f[R](r)), lwd=2, col='orange',ylim=c(0,1))
lines(x=c(1.5,10), y=c(0,0), lwd=2, col='orange')
lines(x=c(-2,0), y=c(0,0), lwd=2, col='orange')
sqrt{7/12}
sqrt(7/12)
0.1*0.3+0.03*0.3+0.07*0.4
{0.07*0.4}/{0.329}
{0.07*0.4}/{0.067}
{0.97*0.3}/{1-0.067}
f <- function(r) exp(-exp(-r/1))
curve(f, from =0, to=10, xlim=c(-1,10), ylim=c(0,1),ylab=expression(F[R](r)), lwd=2, col='blue',xlab='r', xaxt='n')
curve(f, from =-10, to=10, xlim=c(-10,10), ylim=c(0,1),ylab=expression(F[R](r)), lwd=2, col='blue',xlab='r', xaxt='n')
axis(1,at=c(-10, 0, 10), labels=c(expression(-infty),0, expression(infty)))
axis(1,at=c(-10, 0, 10), labels=c(expression(-infinity),0, expression(infinity)))
curve(f, from =-10, to=10, xlim=c(-10,10), ylim=c(0,1),ylab=expression(F[R](r)), lwd=2, col='blue',xlab='r', xaxt='n')
axis(1,at=c(-10, 0, 10), labels=c(expression(-infinity),0, expression(infinity)))
beta=3
exp(-exp(-7/beta))-exp(-exp(-3/beta))
library(autodiffr)
ad_setup()
# setwd("C:/Users/liaoy/OneDrive - University of Missouri/VAE Project")
# setwd('~/Desktop/GEV-GP_VAE/extCVAE/')
source("utils.R")
#### Simulation ####
set.seed(123)
stations <- data.frame(x=runif(2000, 0, 10), y=runif(2000, 0, 10))
knot <- expand.grid(x=c(1,3,5,7,9),y=c(1,3,5,7,9))
plot(stations)
points(knot, pch="+", col='red', cex=2)
k = nrow(knot)
n.s <- nrow(stations)
n.t <- 100 # n.t <- 500
eucD <- rdist(stations,as.matrix(knot))
W <- wendland(eucD,r=3)
dim(W)
W <- sweep(W, 1, rowSums(W), FUN="/")
points(stations[W[,1]>0,], pch=20, col='blue')
points(stations[W[,25]>0,], pch=20, col='green')
points(stations[W[,17]>0,], pch=20, col='orange')
set.seed(12)
theta_sim <- (sin(knot$x/2)*cos(knot$y/2)+1)/50
theta_sim[theta_sim < 0.005] <- 0
theta_sim <- matrix(rep(theta_sim, n.t), ncol=n.t)
fields::image.plot(c(1,3,5,7,9), c(1,3,5,7,9), matrix(theta_sim[,1],5,5), col=terrain.colors(25))
alpha = 0.5
V <- matrix(NA, nrow=k, ncol=n.t)
X <- matrix(NA, nrow=n.s, ncol=n.t)
for (iter in 1:n.t) {
for (i in 1:k) {
V[i,iter] <- double_rejection_sampler(theta = theta_sim[i,iter],alpha = alpha)
}
# X[,iter] <- rfrechet(n.s,shape=(1/alpha)) * (rowSums(V[,iter]*(W^(1/alpha))))^alpha
X[,iter] <- rfrechet(n.s,shape=(1/alpha)) * (rowSums((W^(1/alpha))%*%diag(V[,iter])))^alpha
}
ind=53
spatial_map(stations, var=X[,ind], tight.brks = TRUE, title=paste0('Time replicate #', ind))
y_true <-  rowSums((W^(1/alpha))%*%diag(V))
log_v <- 0
for (i in 1:n.t) {
for (j in 1:k) {
log_v = log_v+log(f_H(V[j,i],alpha = alpha,theta = theta_sim[j,i]))
}
}
part1 = (-n.s * log(alpha) * n.t + sum((-1/alpha-1)*log(X)+log(y_true)) + (-sum(X^(-1/alpha-1)*y_true))) # p(X_t=x_t|v_t)
part2 = log_v
(part1+part2)/(n.s*n.t) # 23.86811
library(autodiffr)
ad_setup()
# setwd("C:/Users/liaoy/OneDrive - University of Missouri/VAE Project")
setwd('~/Desktop/GEV-GP_VAE/extCVAE/')
source("utils.R")
#### Simulation ####
set.seed(123)
stations <- data.frame(x=runif(2000, 0, 10), y=runif(2000, 0, 10))
knot <- expand.grid(x=c(1,3,5,7,9),y=c(1,3,5,7,9))
plot(stations)
points(knot, pch="+", col='red', cex=2)
k = nrow(knot)
n.s <- nrow(stations)
n.t <- 100 # n.t <- 500
eucD <- rdist(stations,as.matrix(knot))
W <- wendland(eucD,r=3)
dim(W)
W <- sweep(W, 1, rowSums(W), FUN="/")
points(stations[W[,1]>0,], pch=20, col='blue')
points(stations[W[,25]>0,], pch=20, col='green')
points(stations[W[,17]>0,], pch=20, col='orange')
set.seed(12)
theta_sim <- (sin(knot$x/2)*cos(knot$y/2)+1)/50
theta_sim[theta_sim < 0.005] <- 0
theta_sim <- matrix(rep(theta_sim, n.t), ncol=n.t)
fields::image.plot(c(1,3,5,7,9), c(1,3,5,7,9), matrix(theta_sim[,1],5,5), col=terrain.colors(25))
alpha = 0.5
V <- matrix(NA, nrow=k, ncol=n.t)
X <- matrix(NA, nrow=n.s, ncol=n.t)
for (iter in 1:n.t) {
for (i in 1:k) {
V[i,iter] <- double_rejection_sampler(theta = theta_sim[i,iter],alpha = alpha)
}
# X[,iter] <- rfrechet(n.s,shape=(1/alpha)) * (rowSums(V[,iter]*(W^(1/alpha))))^alpha
X[,iter] <- rfrechet(n.s,shape=(1/alpha)) * (rowSums((W^(1/alpha))%*%diag(V[,iter])))^alpha
}
ind=53
spatial_map(stations, var=X[,ind], tight.brks = TRUE, title=paste0('Time replicate #', ind))
y_true <-  rowSums((W^(1/alpha))%*%diag(V))
log_v <- 0
for (i in 1:n.t) {
for (j in 1:k) {
log_v = log_v+log(f_H(V[j,i],alpha = alpha,theta = theta_sim[j,i]))
}
}
part1 = (-n.s * log(alpha) * n.t + sum((-1/alpha-1)*log(X)+log(y_true)) + (-sum(X^(-1/alpha-1)*y_true))) # p(X_t=x_t|v_t)
part2 = log_v
(part1+part2)/(n.s*n.t) # 23.86811
#### MLP Decoder ####
ELBO_flexible_extreme <- function(phi, X, Epsilon, Epsilon_prime, alpha, W){
n.s <- nrow(X); n.t <- ncol(X); k <- nrow(Epsilon)
w_1 <- array(phi[1:(k*n.s)],dim=c(k,n.s))
w_2 <- array(phi[(1+k*n.s):(k*k+k*n.s)],dim = c(k,k))
w_3 <- array(phi[(1+k*k+k*n.s):(2*k*k+k*n.s)],dim = c(k,k))
w_4 <- array(phi[(1+2*k*k+k*n.s):(3*k*k+k*n.s)],dim = c(k,k))
b_1 <- phi[(1+3*k*k+k*n.s):(k+3*k*k+k*n.s)]
b_2 <- phi[(1+k+3*k*k+k*n.s):(2*k+3*k*k+k*n.s)]
b_3 <- phi[(1+2*k+3*k*k+k*n.s):(3*k+3*k*k+k*n.s)]
b_4 <- phi[(1+3*k+3*k*k+k*n.s):(4*k+3*k*k+k*n.s)]
w_1_prime <- array(phi[(1+4*k+3*k*k+k*n.s):(4*k+3*k*k+2*k*n.s)],dim=c(k,n.s))
w_2_prime <- array(phi[(1+4*k+3*k*k+2*k*n.s):(4*k+4*k*k+2*k*n.s)],dim = c(k,k))
w_3_prime <- array(phi[(1+4*k+4*k*k+2*k*n.s):(4*k+5*k*k+2*k*n.s)],dim = c(k,k))
w_4_prime <- array(phi[(1+4*k+5*k*k+2*k*n.s):(4*k+6*k*k+2*k*n.s)],dim = c(k,k))
b_1_prime <- phi[(1+4*k+6*k*k+2*k*n.s):(5*k+6*k*k+2*k*n.s)]
b_2_prime <- phi[(1+5*k+6*k*k+2*k*n.s):(6*k+6*k*k+2*k*n.s)]
b_3_prime <- phi[(1+6*k+6*k*k+2*k*n.s):(7*k+6*k*k+2*k*n.s)]
b_4_prime <- phi[(1+7*k+6*k*k+2*k*n.s):(8*k+6*k*k+2*k*n.s)]
w_5 <- array(phi[(1+8*k+6*k*k+2*k*n.s):(8*k+7*k*k+2*k*n.s)],dim = c(k,k))
w_6 <- array(phi[(1+8*k+7*k*k+2*k*n.s):(8*k+8*k*k+2*k*n.s)],dim = c(k,k))
w_7 <- array(phi[(1+8*k+8*k*k+2*k*n.s):(8*k+9*k*k+2*k*n.s)],dim = c(k,k))
b_5 <- phi[(1+8*k+9*k*k+2*k*n.s):(9*k+9*k*k+2*k*n.s)]
b_6 <- phi[(1+9*k+9*k*k+2*k*n.s):(10*k+9*k*k+2*k*n.s)]
b_7 <- phi[(1+10*k+9*k*k+2*k*n.s):(11*k+9*k*k+2*k*n.s)]
# Encoder for v_t
h <- relu(w_1 %m% X + b_1)
h_1 <- relu(w_2 %m% h + b_2)
sigma_sq_vec <- exp(w_3 %m% h_1 + b_3)
mu <- w_4 %m% h_1 + b_4
# Encoder for v_t_prime
h_prime <- relu(w_1_prime %m% X + b_1_prime)
h_1_prime <- relu(w_2_prime %m% h_prime + b_2_prime)
sigma_sq_vec_prime <- exp(w_3_prime %m% h_1_prime + b_3_prime)
mu_prime <- w_4_prime %m% h_1_prime + b_4_prime
# ## re-parameterization trick
v_t <- mu + sqrt(sigma_sq_vec)*Epsilon
v_t_prime <- mu_prime + sqrt(sigma_sq_vec_prime)*Epsilon_prime
# Decoder
l <- relu(w_5 %m% v_t_prime + b_5)
l_1 <- relu(w_6 %m% l + b_6)
theta_t <- array(relu(w_7 %m% l_1 + b_7),dim=c(k,n.t))
learned_Z_t <- exp(v_t)
y <- W^(1/alpha) %m% learned_Z_t
# theta_prior <- ifelse(theta_t<=2 & theta_t>=0, 1, 0) # unif(0,2)
log_v <- 0
for (i in 1:n.t) {
for (j in 1:k) {
log_v = log_v+log(f_H(learned_Z_t[j,i],alpha = alpha,theta = theta_t[j,i]))+v_t[j,i]
}
}
part1 = -(-n.s * log(alpha) * n.t + sum((-1/alpha-1)*log(X)+log(y)) + (-sum(X^(-1/alpha-1)*y))) # p(X_t=x_t|v_t)
part2 = - log_v                                                                        # p(v_t|theta_t), p(theta_t)
part3 = -sum(Epsilon^2)/2- sum(log(sigma_sq_vec))
part4 = - sum(Epsilon_prime^2)/2 -sum(log(sigma_sq_vec_prime))
res <- part1 + part2 + part3 + part4
return(-res/(n.s*n.t))
}
w_1 <- rnorm(k*n.s,0,0.001)
w_2 <- rnorm(k*k,0,0.001)
w_3 <- rnorm(k*k,0,0.001)
w_4 <- rnorm(k*k,0,0.001)
b_1 <- rnorm(k)
b_2 <- rnorm(k)
b_3 <- rnorm(k,0,0.001)
b_4 <- runif(k,-0.001,0.001)
w_1_prime <- rnorm(k*n.s,0,0.001)
w_2_prime <- rnorm(k*k,0,0.001)
w_3_prime <- rnorm(k*k,0,0.001)
w_4_prime <- rnorm(k*k,0,0.001)
b_1_prime <- rnorm(k)
b_2_prime <- rnorm(k)
b_3_prime <- rnorm(k,0,0.001)
b_4_prime <- runif(k,10,20)
w_5 <- rnorm(k*k,0,0.001)
w_6 <- rnorm(k*k,0,0.001)
w_7 <- rnorm(k*k,0,0.001)
b_5 <- rnorm(k)
b_6 <- rnorm(k)
b_7 <- rnorm(k)
phi_star <- c(w_1, w_2, w_3, w_4,
b_1, b_2, b_3, b_4,
w_1_prime, w_2_prime, w_3_prime, w_4_prime,
b_1_prime, b_2_prime, b_3_prime, b_4_prime,
w_5, w_6, w_7, b_5, b_6, b_7)
phi <- phi_star
Epsilon <- t(mvtnorm::rmvnorm(n.t, mean=rep(0, k), sigma = diag(rep(1, k))))
Epsilon_prime <- t(mvtnorm::rmvnorm(n.t, mean=rep(0, k), sigma = diag(rep(1, k))))
ELBO_flexible_extreme(phi=phi_star, X=X, Epsilon=Epsilon, Epsilon_prime=Epsilon_prime,
W=W, alpha = alpha)
Epsilon[1:3,1:3]
X[1:3,1:3]
v_t[1:3,1:3]
n.s <- nrow(X); n.t <- ncol(X); k <- nrow(Epsilon)
w_1 <- array(phi[1:(k*n.s)],dim=c(k,n.s))
w_2 <- array(phi[(1+k*n.s):(k*k+k*n.s)],dim = c(k,k))
w_3 <- array(phi[(1+k*k+k*n.s):(2*k*k+k*n.s)],dim = c(k,k))
w_4 <- array(phi[(1+2*k*k+k*n.s):(3*k*k+k*n.s)],dim = c(k,k))
b_1 <- phi[(1+3*k*k+k*n.s):(k+3*k*k+k*n.s)]
b_2 <- phi[(1+k+3*k*k+k*n.s):(2*k+3*k*k+k*n.s)]
b_3 <- phi[(1+2*k+3*k*k+k*n.s):(3*k+3*k*k+k*n.s)]
b_4 <- phi[(1+3*k+3*k*k+k*n.s):(4*k+3*k*k+k*n.s)]
w_1_prime <- array(phi[(1+4*k+3*k*k+k*n.s):(4*k+3*k*k+2*k*n.s)],dim=c(k,n.s))
w_2_prime <- array(phi[(1+4*k+3*k*k+2*k*n.s):(4*k+4*k*k+2*k*n.s)],dim = c(k,k))
w_3_prime <- array(phi[(1+4*k+4*k*k+2*k*n.s):(4*k+5*k*k+2*k*n.s)],dim = c(k,k))
w_4_prime <- array(phi[(1+4*k+5*k*k+2*k*n.s):(4*k+6*k*k+2*k*n.s)],dim = c(k,k))
b_1_prime <- phi[(1+4*k+6*k*k+2*k*n.s):(5*k+6*k*k+2*k*n.s)]
b_2_prime <- phi[(1+5*k+6*k*k+2*k*n.s):(6*k+6*k*k+2*k*n.s)]
b_3_prime <- phi[(1+6*k+6*k*k+2*k*n.s):(7*k+6*k*k+2*k*n.s)]
b_4_prime <- phi[(1+7*k+6*k*k+2*k*n.s):(8*k+6*k*k+2*k*n.s)]
w_5 <- array(phi[(1+8*k+6*k*k+2*k*n.s):(8*k+7*k*k+2*k*n.s)],dim = c(k,k))
w_6 <- array(phi[(1+8*k+7*k*k+2*k*n.s):(8*k+8*k*k+2*k*n.s)],dim = c(k,k))
w_7 <- array(phi[(1+8*k+8*k*k+2*k*n.s):(8*k+9*k*k+2*k*n.s)],dim = c(k,k))
b_5 <- phi[(1+8*k+9*k*k+2*k*n.s):(9*k+9*k*k+2*k*n.s)]
b_6 <- phi[(1+9*k+9*k*k+2*k*n.s):(10*k+9*k*k+2*k*n.s)]
b_7 <- phi[(1+10*k+9*k*k+2*k*n.s):(11*k+9*k*k+2*k*n.s)]
# Encoder for v_t
h <- relu(w_1 %m% X + b_1)
h_1 <- relu(w_2 %m% h + b_2)
sigma_sq_vec <- exp(w_3 %m% h_1 + b_3)
mu <- w_4 %m% h_1 + b_4
# Encoder for v_t_prime
h_prime <- relu(w_1_prime %m% X + b_1_prime)
h_1_prime <- relu(w_2_prime %m% h_prime + b_2_prime)
sigma_sq_vec_prime <- exp(w_3_prime %m% h_1_prime + b_3_prime)
mu_prime <- w_4_prime %m% h_1_prime + b_4_prime
# ## re-parameterization trick
v_t <- mu + sqrt(sigma_sq_vec)*Epsilon
v_t_prime <- mu_prime + sqrt(sigma_sq_vec_prime)*Epsilon_prime
v_t[1:3,1:3]
w_1[1:6,1;6]
w_1[1:6,1:6]
w_4[1:3,1:3]
w_4_prime[1:3,1:3]
Epsilon[1:3,1:3]
mu
mu[1:3,1:13]
mu[1:3,1:3]
h[1:3,1:3]
X[1:3,1:3]
w_1[1,1]
w_1 %m% X [1:3,1:3]
(w_1 %m% X) [1:3,1:3]
(w_1 %m% X+b_1) [1:3,1:3]
h[1:3,1:3]
(w_1_prime %m% X + b_1_prime)[1:3,1:3]
Epsilon[1:3,1:3]
ELBO_flexible_extreme(phi=phi_star, X=X, Epsilon=Epsilon, Epsilon_prime=Epsilon_prime,
W=W, alpha = alpha)
